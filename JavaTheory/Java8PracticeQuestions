import java.util.*;
import java.util.stream.Collectors;

class User {
  Integer uid;
  String name;
  Integer age;

  // Constructor, getters, and setters are assumed to be present
}

public class Main {
  public static void main(String[] args) {
    // Sample List
    List<User> list = new ArrayList<>();
    list.add(new User(1, "Ajinkya", 25));
    list.add(new User(2, "Pankaj",  23));
    list.add(new User(3, "Venkata", 44));
    list.add(new User(4, "Pravin",  25));
    list.add(new User(5, "Shilpa",  44));

    // Sort the list of User objects by their name using a lambda expression
    list.sort(Comparator.comparing(User::getName));

    // Filter the list to include only users whose age is greater than 30
    List<User> filteredList = list.stream()
                                  .filter(user -> user.getAge() > 30)
                                  .collect(Collectors.toList());

    // Print the name of each User in the list
    list.forEach(user -> System.out.println(user.getName()));

    // Find the first User in the list whose age is equal to 25
    User user25 = list.stream()
                      .filter(user -> user.getAge() == 25)
                      .findFirst()
                      .orElse(null);

    // Check if any User in the list has a name starting with the letter "P"
    boolean startsWithP = list.stream()
                              .anyMatch(user -> user.getName().startsWith("P"));

    // Create a new list of User objects where each user's age is incremented by 1
    List<User> incrementedAgesList = list.stream()
                                         .map(user -> new User(user.getUid(), user.getName(), user.getAge() + 1))
                                         .collect(Collectors.toList());

    // Find the maximum age among all users in the list
    Optional<User> maxAgeUser = list.stream()
                                    .max(Comparator.comparing(User::getAge));

    // Count the number of users in the list whose name contains the letter "a"
    long countUsersWithA = list.stream()
                               .filter(user -> user.getName().contains("a"))
                               .count();

    // Create a map where the keys are the uids and the values are the corresponding User objects
    Map<Integer, User> userMap = list.stream()
                                     .collect(Collectors.toMap(User::getUid, Function.identity()));

    // Calculate the average age of all users in the list
    Double averageAge = list.stream()
                            .collect(Collectors.averagingInt(User::getAge));

    // Find the User with the longest name in the list
    Optional<User> longestNameUser = list.stream()
                                         .max(Comparator.comparingInt(user -> user.getName().length()));

    // Check if all users in the list have a uid greater than 0
    boolean allUidsGreaterThanZero = list.stream()
                                         .allMatch(user -> user.getUid() > 0);

    // Create a new list of strings containing the names of users whose age is less than 30
    List<String> namesUnder30 = list.stream()
                                    .filter(user -> user.getAge() < 30)
                                    .map(User::getName)
                                    .collect(Collectors.toList());

    // Find the User with the smallest uid in the list
    Optional<User> smallestUidUser = list.stream()
                                         .min(Comparator.comparing(User::getUid));

    // Partition the list into two lists: one with users whose age is even and another with users whose age is odd
    Map<Boolean, List<User>> partitionedUsers = list.stream()
                                                    .collect(Collectors.partitioningBy(user -> user.getAge() % 2 == 0));

    // Calculate the sum of uids of all users in the list
    int sumOfUids = list.stream()
                        .mapToInt(User::getUid)
                        .sum();

    // Sort the list by age in descending order
    list.sort(Comparator.comparing(User::getAge).reversed());

    // Find the User with the shortest name in the list
    Optional<User> shortestNameUser = list.stream()
                                          .min(Comparator.comparingInt(user -> user.getName().length()));

    // Create a new list of User objects where each user's name is converted to uppercase
    List<User> upperCaseNamesList = list.stream()
                                        .map(user -> new User(user.getUid(), user.getName().toUpperCase(), user.getAge()))
                                        .collect(Collectors.toList());

    // Check if there exists a User in the list whose uid is equal to a specific value
    int specificUid = 3; // Example UID
    boolean existsSpecificUid = list.stream()
                                    .anyMatch(user -> user.getUid().equals(specificUid));
  }
}
